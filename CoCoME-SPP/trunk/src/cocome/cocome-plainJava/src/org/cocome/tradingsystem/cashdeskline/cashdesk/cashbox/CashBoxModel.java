/***************************************************************************
 * Copyright 2013 DFG SPP 1593 (http://dfg-spp1593.de)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ***************************************************************************/

package org.cocome.tradingsystem.cashdeskline.cashdesk.cashbox;

import java.io.Serializable;

import javax.jms.Connection;
import javax.jms.Session;

import org.apache.log4j.Logger;
import org.cocome.tradingsystem.cashdeskline.datatypes.ControlKeyStroke;
import org.cocome.tradingsystem.cashdeskline.datatypes.NumPadKeyStroke;
import org.cocome.tradingsystem.cashdeskline.datatypes.PaymentMode;
import org.cocome.tradingsystem.cashdeskline.events.CashAmountEnteredEvent;
import org.cocome.tradingsystem.cashdeskline.events.CashBoxClosedEvent;
import org.cocome.tradingsystem.cashdeskline.events.CashBoxNumPadKeypressEvent;
import org.cocome.tradingsystem.cashdeskline.events.CashBoxOpenedEvent;
import org.cocome.tradingsystem.cashdeskline.events.ExpressModeDisabledEvent;
import org.cocome.tradingsystem.cashdeskline.events.PaymentModeSelectedEvent;
import org.cocome.tradingsystem.cashdeskline.events.SaleFinishedEvent;
import org.cocome.tradingsystem.cashdeskline.events.SaleStartedEvent;
import org.cocome.tradingsystem.util.JmsHelper;
import org.cocome.tradingsystem.util.JmsHelper.SessionBoundProducer;
import org.cocome.tradingsystem.util.Names;
import org.cocome.tradingsystem.util.event.ObjectMessageListener;
import org.cocome.tradingsystem.util.mvc.AbstractModel;

/**
 * Implements the cash desk cash box model.
 * <p>
 * TODO Consider using transacted session so that sent messages are in the same transaction as the received messages.
 * 
 * @author Yannick Welsch
 * @author Lubomir Bulej
 */
public final class CashBoxModel
		extends AbstractModel<CashBoxModel> implements ICashBox {

	private static final Logger LOG =
			Logger.getLogger(CashBoxModel.class);

	private static final String COMPONENT_NAME = "Cash Box";

	//

	private final SessionBoundProducer cashDeskProducer;

	private final StringBuilder amountInput = new StringBuilder();

	//

	/** Enumerates the possible cash box states. */
	private enum CashBoxState {
		OPEN, CLOSED
	}

	private CashBoxState state;

	//

	CashBoxModel(final SessionBoundProducer cashDeskProducer) {
		super(COMPONENT_NAME);

		this.cashDeskProducer = cashDeskProducer;
		this.setState(CashBoxState.CLOSED);
	}

	//
	// Cash box model methods
	//

	@Override
	public void open() {
		if (this.setState(CashBoxState.OPEN)) {
			this.sendCashDeskEvent(new CashBoxOpenedEvent());
		}
	}

	@Override
	public void close() {
		if (this.setState(CashBoxState.CLOSED)) {
			this.sendCashDeskEvent(new CashBoxClosedEvent());
		}
	}

	/**
	 * Closes the cash box without sending a CashBoxClosedEvent. This is needed
	 * for test scenarios, where the event is generated by the test code.
	 * <p>
	 * TODO The tests should use this implementation through RMI to avoid such hacks. --LB
	 */
	void closeSilently() {
		this.setState(CashBoxState.CLOSED);
	}

	@Override
	public boolean isOpen() {
		return this.getState() == CashBoxState.OPEN;
	}

	//

	private synchronized boolean setState(final CashBoxState newState) {
		final boolean changed = this.state != newState;
		if (changed) {
			this.state = newState;
			this.changedContent();
		}

		return changed;
	}

	private synchronized CashBoxState getState() {
		return this.state;
	}

	//

	@Override
	public void pressControlKey(final ControlKeyStroke keyStroke) {
		Serializable event;
		switch (keyStroke) {
		case CASH_PAYMENT:
			event = new PaymentModeSelectedEvent(PaymentMode.CASH);
			break;
		case CREDIT_CARD_PAYMENT:
			event = new PaymentModeSelectedEvent(PaymentMode.CREDIT_CARD);
			break;
		case DISABLE_EXPRESS_MODE:
			event = new ExpressModeDisabledEvent();
			break;
		case FINISH_SALE:
			event = new SaleFinishedEvent();
			break;
		case START_SALE:
			event = new SaleStartedEvent();
			break;
		default:
			throw new RuntimeException("Wrong key stroke " + keyStroke);
		}
		this.sendCashDeskEvent(event);
	}

	@Override
	public void pressNumpadKey(final NumPadKeyStroke keyStroke) {
		//
		// Send out the keystroke to other cash desk components.
		//
		this.sendCashDeskEvent(new CashBoxNumPadKeypressEvent(keyStroke));

		//
		// Collect key strokes from the cash box. When the cashier presses the
		// ENTER key, convert the sequence to number and send out an event with
		// the amount entered.
		//
		if (keyStroke != NumPadKeyStroke.ENTER) {
			this.amountInput.append(keyStroke.label());

		} else {
			try {
				final double amount = Double.parseDouble(this.amountInput.toString());
				this.sendCashAmountEnteredEvent(amount);

			} catch (final NumberFormatException nfe) {
				LOG.error("Invalid cash amount: " + nfe.getMessage());
			}

			//
			// Clear the buffer for next (or repeated entry).
			//
			this.amountInput.setLength(0);
		}
	}

	private void sendCashAmountEnteredEvent(final double amount) {
		this.sendCashDeskEvent(new CashAmountEnteredEvent(amount));
	}

	//

	private void sendCashDeskEvent(final Serializable eventObject) {
		this.cashDeskProducer.sendAsync(eventObject);
	}

	//

	public static CashBoxModel newInstance(
			final String cashDeskName, final String storeName,
			final Connection connection
			) {
		try {
			final String cashDeskTopicName =
					Names.getCashDeskTopicName(cashDeskName, storeName);

			//
			// Create a session for messages originating from the Swing event
			// dispatcher thread and create the cash box model.
			//
			final Session producerSession = JmsHelper.createSession(connection);
			final CashBoxModel cashBox = new CashBoxModel(
					JmsHelper.createSessionBoundProducer(producerSession, cashDeskTopicName)
					);

			//
			// Create a separate session for messages consumed by the cash box
			// (these will originate in the JMS dispatcher thread) and register
			// a separate cash box event handler as consumer in the session.
			//
			final Session consumerSession = JmsHelper.createSession(connection);
			JmsHelper.registerConsumer(
					consumerSession, cashDeskTopicName,
					new ObjectMessageListener(new CashBoxEventHandler(cashBox))
					);

			return cashBox;

			// TODO fix catch all
		} catch (final Exception e) { // NOCS
			final String message = String.format(
					"Failed to initialize %s (%s, %s)",
					COMPONENT_NAME, cashDeskName, storeName
					);

			LOG.fatal(message, e);
			throw new RuntimeException(message, e);
		}
	}

}
